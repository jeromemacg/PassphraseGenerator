package techwavepasswordgeneratorgui;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.image.ImagingOpException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Random;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author zjona
 */
public class TechwavePasswordGenerator extends javax.swing.JFrame {

    /**
     * Creates new form TechwavePasswordGenerator
     */
    public TechwavePasswordGenerator() {
        initComponents();
        setIcon();
        uploadData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        iconLabel = new javax.swing.JLabel();
        tittleLabel = new javax.swing.JLabel();
        descriptionScrollPanel = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        resultTextField = new javax.swing.JTextField();
        responseLabel = new javax.swing.JLabel();
        generatePassphraseButton = new javax.swing.JButton();
        generateTenPassphraseButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Passphrase Generator");
        setBackground(new java.awt.Color(102, 0, 255));
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(102, 0, 255));

        iconLabel.setBackground(new java.awt.Color(102, 0, 255));
        iconLabel.setForeground(new java.awt.Color(255, 255, 255));
        iconLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/techwaveIcon.png"))); // NOI18N

        tittleLabel.setBackground(new java.awt.Color(102, 0, 255));
        tittleLabel.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        tittleLabel.setForeground(new java.awt.Color(255, 255, 255));
        tittleLabel.setText("Techwave Passphrase Generator");

        descriptionScrollPanel.setBackground(new java.awt.Color(102, 0, 255));
        descriptionScrollPanel.setBorder(null);
        descriptionScrollPanel.setForeground(new java.awt.Color(255, 255, 255));
        descriptionScrollPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        descriptionScrollPanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        descriptionScrollPanel.setEnabled(false);
        descriptionScrollPanel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        descriptionTextArea.setEditable(false);
        descriptionTextArea.setBackground(new java.awt.Color(102, 0, 255));
        descriptionTextArea.setColumns(20);
        descriptionTextArea.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        descriptionTextArea.setForeground(new java.awt.Color(255, 255, 255));
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(5);
        descriptionTextArea.setText("Generates a secure passphrase for user or system accounts with a minimum of 12 characters based on a dictionary list of words");
        descriptionTextArea.setWrapStyleWord(true);
        descriptionTextArea.setAutoscrolls(false);
        descriptionTextArea.setBorder(null);
        descriptionTextArea.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        descriptionTextArea.setFocusable(false);
        descriptionScrollPanel.setViewportView(descriptionTextArea);

        resultTextField.setEditable(false);
        resultTextField.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        resultTextField.setAutoscrolls(false);
        resultTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultTextFieldActionPerformed(evt);
            }
        });

        responseLabel.setBackground(new java.awt.Color(102, 0, 255));
        responseLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        responseLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        generatePassphraseButton.setText("Generate Passphrase");
        generatePassphraseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatePassphraseButtonActionPerformed(evt);
            }
        });

        generateTenPassphraseButton.setText("Generate 10 Passphrases To TXT");
        generateTenPassphraseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateTenPassphraseButtonActionPerformed(evt);
            }
        });

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(iconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(tittleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(responseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(253, 253, 253))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(descriptionScrollPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(generatePassphraseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(generateTenPassphraseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addComponent(resultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(copyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(65, 65, 65))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(tittleLabel))
                    .addComponent(iconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(descriptionScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(generatePassphraseButton, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE)
                    .addComponent(generateTenPassphraseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(copyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resultTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(responseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void resultTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resultTextFieldActionPerformed

    private void generatePassphraseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatePassphraseButtonActionPerformed
        // TODO add your handling code here:
        String word;
        word = createPasswords();

        resultTextField.setText(word);
        responseLabel.setForeground(Color.white);
        responseLabel.setText("NEW PASSPHRASE CREATED");
    }//GEN-LAST:event_generatePassphraseButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        // TODO add your handling code here:
        if(!resultTextField.getText().equals("")){
            String str = resultTextField.getText();
            Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();
            StringSelection strse1 = new StringSelection(str);
            clip.setContents(strse1, strse1);
            responseLabel.setForeground(Color.green);
            responseLabel.setText("PASSPHRASE HAS BEEN COPIED");
        }else{
            responseLabel.setForeground(Color.red);
            responseLabel.setText("PASSPHRASE DIDNT CREATE");
        }
    }//GEN-LAST:event_copyButtonActionPerformed

    private void generateTenPassphraseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateTenPassphraseButtonActionPerformed
        // TODO add your handling code here:
        for(int i = 0; i < 10; i++){
            wordTenArray.add(createPasswords());
        }

        JFileChooser fs  = new JFileChooser();
        fs.setDialogTitle("Save a file");
        fs.setFileFilter(new FileTypeFilter(".txt","Text File"));
        fs.setSelectedFile(new File("passphrases.txt"));
        File f = new File("/resources/techwaveIcon.png");

        fs.getIcon(f);
        fs.setEnabled(false);
        int result = fs.showSaveDialog(null);

        if(result == JFileChooser.APPROVE_OPTION){
            File fi  = fs.getSelectedFile();
            try {
                try (FileWriter writer = new FileWriter(fi.getPath())) {

                    for(String str: wordTenArray) {
                        writer.write(str + System.lineSeparator());
                    }

                }
                responseLabel.setForeground(Color.white);
                responseLabel.setText("10 PASSPHRASES CREATED");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
                responseLabel.setForeground(Color.red);
                responseLabel.setText("PASSPHRASES CANT CREATED");
            }
        }
    }//GEN-LAST:event_generateTenPassphraseButtonActionPerformed

    private void uploadData(){
        InputStream in =  getClass().getResourceAsStream("/resources/words.txt");
        String str;
        
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(in));
            if(in != null){
                while((str = reader.readLine()) != null) {
                    words.add(str);
                }
            }
        } catch (IOException e) {
            System.out.println("FILE PATH IS BAD");
        }    
    }
    
    private void setIcon(){
        try {
            setIconImage( Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resources/techwaveIcon.png")));  
        } catch(ImagingOpException ex){
            System.out.println(ex);
        } 
    }
    
    private String createPasswords(){
        Random random=new Random();
        String result = "", strOne, strTwo = "", strThree;
        boolean uniqueFlag = false;
        
        while(result.length() <= 12){
            strOne = words.get(random.nextInt(words.size()));
            
            while(uniqueFlag != true){
                strTwo = words.get(random.nextInt(words.size()));
                if(!strTwo.equals(strOne)) uniqueFlag = true;
            }
            
            uniqueFlag = false;
            
            while(uniqueFlag != true){
                strThree = words.get(random.nextInt(words.size()));
                if(!strThree.equals(strOne) && !strThree.equals(strTwo)) uniqueFlag = true;
            }
             
            strThree = words.get(random.nextInt(words.size()));
            result = strOne+strTwo+strThree;
        }
        
        return result;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton copyButton;
    private javax.swing.JScrollPane descriptionScrollPanel;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JButton generatePassphraseButton;
    private javax.swing.JButton generateTenPassphraseButton;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel responseLabel;
    private javax.swing.JTextField resultTextField;
    private javax.swing.JLabel tittleLabel;
    // End of variables declaration//GEN-END:variables
    private final static ArrayList<String> words = new ArrayList<>();
    private final static ArrayList<String> wordTenArray = new ArrayList<>();
}